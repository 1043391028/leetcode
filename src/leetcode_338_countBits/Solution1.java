package leetcode_338_countBits;

//   题目: 比特位计算;
//   描述: 给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。
//
// 示例 1:
//         输入: 2
//         输出: [0,1,1]

//   进阶:
//         给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
//          要求算法的空间复杂度为O(n)。
//        你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。
//
//  思路一: 最简洁明了的思路;
//          奇数: 下一位奇数二进制位 '1' 的个数比前一位数(比它小1的数)多1;
//          偶数: 下一位奇数二进制位 '1' 的个数和它大小一半的数相等;

public class Solution1 {
    public int[] countBits(int num) {
        int[] res = new int[num+1];
        res[0] = 0;
        for(int i=1;i<=num;i++){
            if(i%2 == 1){
                res[i] = res[i-1]+1; // 奇数: 下一位奇数二进制位 '1' 的个数比前一位数(比它小1的数)多1;
            }else{
                res[i] = res[i>>1]; // 偶数: 下一位奇数二进制位 '1' 的个数和它大小一半的数相等;
            }
        }
        return res;
    }
}
