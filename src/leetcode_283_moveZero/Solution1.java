package leetcode_283_moveZero;

//   题目: 移动 0;
//   描述: 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
//
//   示例:
//        输入: [0,1,0,3,12]
//        输出: [1,3,12,0,0]
//   说明:
//        必须在原数组上操作，不能拷贝额外的数组。
//        尽量减少操作次数。
//   思路:
//         双指针;
//         1. 前后两个指针同时从数组第一个元素往后走;
//         2. 前面指针元素不为0,后面指针被前面指针元素赋值,后面指针并后移,
//            (前面指针一直在走,遍历条件里,碰到元素为0,后面指针不移动),
//             这样,遍历完数组,后面指针只想元素为最后一个不为0元素;
//         3. 从 j(后面指针指向的位置)位置开始到数组最后,补0;
public class Solution1 {
    public void moveZeroes(int[] nums) {
        if(nums == null|| nums.length == 0) return ;
        int j=0;
        // 整理数组(双指针);
        for(int i=0;i<nums.length;i++){
            if(nums[i] != 0){
                nums[j++] = nums[i];
            }
        }
        // 数组补 0;
        for(;j < nums.length;j++){
            nums[j] = 0;
        }
    }
}
