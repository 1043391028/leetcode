package lc_1217_minCostToMoveCoin;

//  题目： 玩筹码；
//   描述： 数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。
//
//           你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：
//
//       将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
//       将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
//       最开始的时候，同一位置上也可能放着两个或者更多的筹码。
//
//      返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。
//  示例 2：
//         输入：chips = [2,2,2,3,3]（位置2有3个筹码，位置3有2个筹码）
//         输出：2
//  解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。
//
//  思路： 两个位置移动不耗筹码；所以奇数位和偶数位移动不消耗筹码；
//           统计奇数个位置的筹码个数 odd,偶数位置筹码的个数 even;
//              返回较小的（只需要包少的移动到多的位置）

public class Solution1 {
    public int minCostToMoveChips(int[] position) {
        int odd = 0,even = 0;
        for(int num : position){
            if(num%2 == 0){
                even++;
            }else{
                odd++;
            }
        }
        return Math.min(even,odd);
    }
}
